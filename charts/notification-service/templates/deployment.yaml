apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "notification-service.fullname" . }}
  labels:
    app.kubernetes.io/name: {{ include "notification-service.name" . }}
    helm.sh/chart: {{ include "notification-service.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "notification-service.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "notification-service.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: SPRING_PROFILES_ACTIVE
              value: {{ .Values.env.profile }}
            - name: PG_HOST
              value: {{ .Values.env.db.host }}
            - name: PG_PORT
              value: {{ .Values.env.db.port }}
            - name: PG_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.env.db.secret }}
                  key: username
            - name: PG_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.env.db.secret }}
                  key: password
            - name: OAUTH_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.env.oauth.secret }}
                  key: secretKey
            - name: SES_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.env.aws.ses.secretName }}
                  key: username
            - name: SES_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.env.aws.ses.secretName }}
                  key: secret
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          readinessProbe:
            httpGet:
              scheme: HTTP
              path: /actuator/health
              port: 8080
            initialDelaySeconds: 30
            periodSeconds: 5
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 5
          livenessProbe:
            httpGet:
              scheme: HTTP
              path: /actuator/health
              port: 8080
            initialDelaySeconds: 30
            periodSeconds: 5
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 5
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
